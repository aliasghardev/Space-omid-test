import { createApi } from '@reduxjs/toolkit/query/react';
import { axiosBaseQuery } from '@/utils/axiosBaseQuery';

// API response structure
interface GetUsersResponse {
  data: User[];
  total_pages: number;
  page: number;
  per_page: number;
}

// User data type
export interface User {
  id: number;
  email: string;
  first_name: string;
  last_name: string;
  avatar?: string;
}

// Create an API slice for user-related operations
export const userApi = createApi({
  reducerPath: 'userApi',
  baseQuery: axiosBaseQuery({ baseUrl: 'https://reqres.in/api' }),
  endpoints: (builder) => ({
    getUsers: builder.query<{ users: User[]; totalPages: number }, number>({
      query: (page) => ({
        url: '/users',
        method: 'GET',
        params: { page, per_page: 6 },
      }),
      transformResponse: (response: GetUsersResponse) => ({
        users: response.data,
        totalPages: response.total_pages,
      }),
    }),

    getUserById: builder.query<User, number>({
      query: (id) => ({
        url: `/users/${id}`,
        method: 'GET',
      }),
      transformResponse: (response: { data: User }) => response.data,
    }),

    addUser: builder.mutation<User, { data: Partial<User>; page: number }>({
      query: ({ data }) => ({
        url: '/users',
        method: 'POST',
        data,
      }),
      async onQueryStarted({ page }, { dispatch, queryFulfilled }) {
        try {
          const { data: createdUser } = await queryFulfilled;
          dispatch(
            userApi.util.updateQueryData('getUsers', page, (draft) => {
              draft.users.unshift(createdUser);
            })
          );
        } catch (err) {
          console.error('Failed to add user:', err);
        }
      },
    }),

    editUser: builder.mutation<
      User,
      { id: number; data: Partial<User>; page: number }
    >({
      query: ({ id, data }) => ({
        url: `/users/${id}`,
        method: 'PUT',
        data,
      }),
      async onQueryStarted({ id, page }, { dispatch, queryFulfilled }) {
        try {
          const { data: updatedUser } = await queryFulfilled;

          dispatch(
            userApi.util.updateQueryData('getUsers', page, (draft) => {
              const index = draft.users.findIndex((u) => u.id === id);
              if (index !== -1) {
                draft.users[index] = {
                  ...draft.users[index],
                  ...updatedUser,
                };
              }
            })
          );
        } catch (err) {
          console.error('Edit user failed:', err);
        }
      },
    }),

    deleteUser: builder.mutation<
      { success: boolean },
      { id: number; page: number }
    >({
      query: ({ id }) => ({
        url: `/users/${id}`,
        method: 'DELETE',
      }),
      async onQueryStarted({ id, page }, { dispatch, queryFulfilled }) {
        try {
          await queryFulfilled;
          dispatch(
            userApi.util.updateQueryData('getUsers', page, (draft) => {
              draft.users = draft.users.filter((u) => u.id !== id);
            })
          );
        } catch (err) {
          console.error('Delete user failed:', err);
        }
      },
    }),
  }),
});

// Export hooks generated by RTK Query
export const {
  useGetUsersQuery,
  useAddUserMutation,
  useEditUserMutation,
  useDeleteUserMutation,
  useGetUserByIdQuery,
} = userApi;
